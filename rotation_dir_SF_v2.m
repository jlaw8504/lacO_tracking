%%This program searches for the Coordinate_Summary.xls file generated by
%%the perl script excel_directory_v2.4.pl, parses the GFP and RFP
%%coordiantes and rotates the coordinates to align the RFP coordinates to
%%the X axis.  This program is designed to be run on the current
%%directory, so change your current directory to the folder that holds all
%%of your coordinate data.

[folders]=subdir(cd); %lists all the folders in the directory, note returns the full path
folder_count = length(folders); %tells me the # of folders
for i = 1:folder_count %loop through all folders listed
    cd(folders{1,i}); %change to a particular folder
    items = dir;    %give a list of all the files in folder
    item_count = length(items); %how many items are in folder
    for n = 1:item_count %loop through all items in folder
        file = items(n,1).name; %assign item in folder to variable file
        TF = strcmp('Coordinate_Summary.xls',file); %tests if item name is Coordinate_Summary.xls
        if TF ==1 %if that item is Coordinate_summar.xls then do..
            path = strcat(pwd,'/',file); %Create a variable with the full path to that file
            display(path)   %show me that path on the display so I know the program is running
            RFP_1_check = xlsread(file,'C2:C2'); %Assign value in C2 
            TF_empty_R1 = isempty(RFP_1_check);  % Is this variable empty?
            RFP_2_check = xlsread(file,'G2:G2'); %Repeat last two lines but for RFP_2_x
            TF_empty_R2 = isempty(RFP_2_check);
            if TF_empty_R1 == 0 && TF_empty_R2 == 0  %If both RFP_1 and RFP_2 exist then get their x and y coordinates
                RFP1_x = xlsread('Coordinate_Summary.xls','Sheet1','C:C');
                RFP1_y = xlsread('Coordinate_Summary.xls','Sheet1','D:D');
                RFP2_x = xlsread('Coordinate_Summary.xls','Sheet1','G:G');
                RFP2_y = xlsread('Coordinate_Summary.xls','Sheet1','H:H');              
            
            %check for GFP_1 and GFP_2 values
            GFP_1_check = xlsread(file,'A2:A2');
            TF_empty_G1 = isempty(GFP_1_check);
            GFP_2_check = xlsread(file,'E2:E2');
            TF_empty_G2 = isempty(GFP_2_check);
            
            %if GFP_1 and/or GFP_2 exist write them to variables
            if TF_empty_G1 == 0
                GFP1_x = xlsread('Coordinate_Summary.xls','Sheet1','A:A');
                GFP1_y = xlsread('Coordinate_Summary.xls','Sheet1','B:B');
            end
            if TF_empty_G2 == 0
                GFP2_x = xlsread('Coordinate_Summary.xls','Sheet1','E:E');
                GFP2_y = xlsread('Coordinate_Summary.xls','Sheet1','F:F');
            end
            
            %Register Coordinates to RFP1
            if TF_empty_G1 == 0
                GFP1_x_reg = GFP1_x - RFP1_x;
                GFP1_y_reg = GFP1_y - RFP1_y;
            end
            
             if TF_empty_G2 == 0
                GFP2_x_reg = GFP2_x - RFP1_x;
                GFP2_y_reg = GFP2_y - RFP1_y;
            end
            
            RFP1_x_reg = RFP1_x - RFP1_x;
            RFP1_y_reg = RFP1_y - RFP1_y;      
            RFP2_x_reg = RFP2_x - RFP1_x;
            RFP2_y_reg = RFP2_y - RFP1_y;
            
            %Calculate Distance from the Origin(RFP1)
            if TF_empty_G1 == 0
                GFP1_dist = sqrt(((GFP1_x_reg).^2)+((GFP1_y_reg).^2));
            end
            
            if TF_empty_G2 == 0
                GFP2_dist = sqrt(((GFP2_x_reg).^2)+((GFP2_y_reg).^2));
            end
            
            RFP1_dist = sqrt(((RFP1_x_reg).^2)+((RFP1_y_reg).^2));
            RFP2_dist = sqrt(((RFP2_x_reg).^2)+((RFP2_y_reg).^2));
            
            
            
            %Calculate Angles from origin
            if TF_empty_G1 == 0
                GFP1_theta = zeros((length(GFP1_x)),1);
                for i = 1:(length(GFP1_x))
                    GFP1_theta(i) = atan((GFP1_y_reg(i)/GFP1_x_reg(i)));
                end
            end
            
            if TF_empty_G2 == 0
                GFP2_theta = zeros((length(GFP2_x)),1);
                for i = 1:(length(GFP2_x))
                    GFP2_theta(i) = atan((GFP2_y_reg(i)/GFP2_x_reg(i)));
                end
            end
            
            RFP1_theta = zeros((length(RFP1_x)),1);
            for i = 1:(length(RFP1_x))
                RFP1_theta(i) = atan((RFP1_y_reg(i)/RFP1_x_reg(i)));
            end
            
            RFP2_theta = zeros((length(RFP2_x)),1);
            for i = 1:(length(RFP2_x))
                RFP2_theta(i) = atan((RFP2_y_reg(i)/RFP2_x_reg(i)));
            end
            
            %Correct the Angles by subtractin the RFP2 theta from all angles
            if TF_empty_G1 == 0
                GFP1_theta_corr = GFP1_theta-RFP2_theta;
            end
            
            if TF_empty_G2 == 0
                GFP2_theta_corr = GFP2_theta-RFP2_theta;
            end
            
            %No need to do RFP1_theta_corr as the angles are NaN.
            
            RFP2_theta_corr = RFP2_theta-RFP2_theta;
            
            %Calculate new coords from theta_corr
            if TF_empty_G1 == 0
                GFP1_x_rot = (cos(GFP1_theta_corr).*(GFP1_dist));
                GFP1_y_rot = (sin(GFP1_theta_corr).*(GFP1_dist));
            end
            
            RFP1_x_rot = RFP1_x_reg;
            RFP1_y_rot = RFP1_y_reg;
            
            if TF_empty_G2 == 0
                GFP2_x_rot = (cos(GFP2_theta_corr).*(GFP2_dist));
                GFP2_y_rot = (sin(GFP2_theta_corr).*(GFP2_dist));
            end
            
            RFP2_x_rot = (cos(RFP2_theta_corr).*(RFP2_dist));
            RFP2_y_rot = (sin(RFP2_theta_corr).*(RFP2_dist));
            
            %Checking the fidelity of the rotation
            %Rationale: Check the distances between all four points in one time point
            
            if TF_empty_G1 == 0 && TF_empty_G2 == 0
                GFP1_GFP2_reg_dist = zeros((length(GFP1_x_reg)),1);
                GFP1_GFP2_rot_dist = zeros((length(GFP1_x_rot)),1);
                for i = 1:(length(GFP1_x_reg))
                    GFP1_GFP2_reg_dist(i) = sqrt(((GFP1_x_reg(i)-GFP2_x_reg(i))^2) + ((GFP1_y_reg(i)-GFP2_y_reg(i))^2));
                    GFP1_GFP2_rot_dist(i) = sqrt(((GFP1_x_rot(i)-GFP2_x_rot(i))^2) + ((GFP1_y_rot(i)-GFP2_y_rot(i))^2));
                end
            end
            
            if TF_empty_G1 == 0
                GFP1_RFP2_reg_dist = zeros((length(GFP1_x_reg)),1);
                GFP1_RFP2_rot_dist = zeros((length(GFP1_x_rot)),1);
                for i = 1:(length(GFP1_x_reg))
                    GFP1_RFP2_reg_dist(i) = sqrt(((GFP1_x_reg(i)-RFP2_x_reg(i))^2) + ((GFP1_y_reg(i)-RFP2_y_reg(i))^2));
                    GFP1_RFP2_rot_dist(i) = sqrt(((GFP1_x_rot(i)-RFP2_x_rot(i))^2) + ((GFP1_y_rot(i)-RFP2_y_rot(i))^2));
                end
            end
            
            if TF_empty_G2 == 0
                GFP2_RFP2_reg_dist = zeros((length(GFP2_x_reg)),1);
                GFP2_RFP2_rot_dist = zeros((length(GFP2_x_rot)),1);
                for i = 1:(length(GFP2_x_reg))
                    GFP2_RFP2_reg_dist(i) = sqrt(((GFP2_x_reg(i)-RFP2_x_reg(i))^2) + ((GFP2_y_reg(i)-RFP2_y_reg(i))^2));
                    GFP2_RFP2_rot_dist(i) = sqrt(((GFP2_x_rot(i)-RFP2_x_rot(i))^2) + ((GFP2_y_rot(i)-RFP2_y_rot(i))^2));
                end
            end
            
            %Round and Compare Distances per timepoint
            if TF_empty_G1 == 0
                GFP1_RFP2_reg_dist = roundn(GFP1_RFP2_reg_dist,-5);
                GFP1_RFP2_rot_dist = roundn(GFP1_RFP2_rot_dist,-5);
                GFP1_RFP2_TF = GFP1_RFP2_reg_dist == GFP1_RFP2_rot_dist;
            end
            
            if TF_empty_G2 == 0
                GFP2_RFP2_reg_dist = roundn(GFP2_RFP2_reg_dist,-5);
                GFP2_RFP2_rot_dist = roundn(GFP2_RFP2_rot_dist,-5);
                GFP2_RFP2_TF = GFP2_RFP2_reg_dist == GFP2_RFP2_rot_dist;
            end
            
            %Flip sign if GFP_RFP2 distance changes
            if TF_empty_G1 == 0
                for i = 1:(length(GFP1_RFP2_TF))
                    if GFP1_RFP2_TF(i) == 0
                        GFP1_x_rot(i) = (-1)*GFP1_x_rot(i);
                        GFP1_y_rot(i) = (-1)*GFP1_y_rot(i);
                    end
                end
            end
            
            if TF_empty_G2 == 0
                for i = 1:(length(GFP2_RFP2_TF))
                    if GFP2_RFP2_TF(i) == 0
                        GFP2_x_rot(i) = (-1)*GFP2_x_rot(i);
                        GFP2_y_rot(i) = (-1)*GFP2_y_rot(i);
                    end
                end
            end
            
            %Recalculating Rotated Distances for re-check
            if TF_empty_G1 == 0 && TF_empty_G2 == 0
                GFP1_GFP2_rot_dist = zeros((length(GFP1_x_rot)),1);
                for i = 1:(length(GFP1_x_reg))
                    GFP1_GFP2_rot_dist(i) = sqrt(((GFP1_x_rot(i)-GFP2_x_rot(i))^2) + ((GFP1_y_rot(i)-GFP2_y_rot(i))^2));
                end
            end
            
            if TF_empty_G1 == 0
                GFP1_RFP2_rot_dist = zeros((length(GFP1_x_rot)),1);
                for i = 1:(length(GFP1_x_reg))
                    GFP1_RFP2_rot_dist(i) = sqrt(((GFP1_x_rot(i)-RFP2_x_rot(i))^2) + ((GFP1_y_rot(i)-RFP2_y_rot(i))^2));
                end
            end
            
            if TF_empty_G2 == 0
                GFP2_RFP2_rot_dist = zeros((length(GFP2_x_rot)),1);
                for i = 1:(length(GFP2_x_reg))
                    GFP2_RFP2_rot_dist(i) = sqrt(((GFP2_x_rot(i)-RFP2_x_rot(i))^2) + ((GFP2_y_rot(i)-RFP2_y_rot(i))^2));
                end
            end
            
            %Re-check of reg vs rot distances for GFP1 to GFP2
            
            if TF_empty_G1 == 0 && TF_empty_G2 == 0
                GFP1_GFP2_reg_dist = roundn(GFP1_GFP2_reg_dist,-5);
                GFP1_GFP2_rot_dist = roundn(GFP1_GFP2_rot_dist,-5);
                GFP1_GFP2_TF = GFP1_GFP2_reg_dist == GFP1_GFP2_rot_dist;
            end
            
            %Round and Compare Distances per timepoint
            if TF_empty_G1 == 0
                GFP1_RFP2_reg_dist = roundn(GFP1_RFP2_reg_dist,-5);
                GFP1_RFP2_rot_dist = roundn(GFP1_RFP2_rot_dist,-5);
                GFP1_RFP2_TF = GFP1_RFP2_reg_dist == GFP1_RFP2_rot_dist;
            end
            
            if TF_empty_G2 == 0
                GFP2_RFP2_reg_dist = roundn(GFP2_RFP2_reg_dist,-5);
                GFP2_RFP2_rot_dist = roundn(GFP2_RFP2_rot_dist,-5);
                GFP2_RFP2_TF = GFP2_RFP2_reg_dist == GFP2_RFP2_rot_dist;
            end
            
            if TF_empty_G1 == 0 && TF_empty_G2 == 0
                final_TF = GFP1_GFP2_TF + GFP1_RFP2_TF + GFP2_RFP2_TF;
                
                for i = 1:(length(final_TF))
                    if final_TF(i) ~= 3;
                        disp(sprintf('For %d: Error Found!', i));
                    else
                        disp(sprintf('For %d: No Error', i));
                    end
                end
            end
            
            if TF_empty_G1 == 1 && TF_empty_G2 == 0
                final_TF = GFP2_RFP2_TF;
                
                for i = 1:(length(final_TF))
                    if final_TF(i) ~= 1;
                        disp(sprintf('For %d: Error Found!', i));
                    else
                        disp(sprintf('For %d: No Error', i));
                    end
                end
            end
            
            if TF_empty_G1 == 0 && TF_empty_G2 == 1
                final_TF = GFP1_RFP2_TF;
                
                for i = 1:(length(final_TF))
                    if final_TF(i) ~= 1;
                        disp(sprintf('For %d: Error Found!', i));
                    else
                        disp(sprintf('For %d: No Error', i));
                    end
                end
            end             
           
            xlswrite('rotated_coordinates.xls', RFP1_x_rot, 'Sheet1', 'A2');
            xlswrite('rotated_coordinates.xls',cellstr('RFP_x_rot'),'Sheet1','A1');
            xlswrite('rotated_coordinates.xls', RFP1_y_rot, 'Sheet1', 'B2');
            xlswrite('rotated_coordinates.xls',cellstr('RFP_y_rot'),'Sheet1','B1');
            if TF_empty_G1 == 0
                xlswrite('rotated_coordinates.xls', GFP1_x_rot, 'Sheet1', 'E2');
                xlswrite('rotated_coordinates.xls',cellstr('GFP1_x_rot'),'Sheet1','E1');
                xlswrite('rotated_coordinates.xls', GFP1_y_rot, 'Sheet1', 'F2');
                xlswrite('rotated_coordinates.xls',cellstr('GFP1_y_rot'),'Sheet1','F1');
            end
            
            if TF_empty_G2 == 0
                xlswrite('rotated_coordinates.xls', GFP2_x_rot, 'Sheet1', 'G2');
                xlswrite('rotated_coordinates.xls',cellstr('GFP2_x_rot'),'Sheet1','G1');
                xlswrite('rotated_coordinates.xls', GFP2_y_rot, 'Sheet1', 'H2');
                xlswrite('rotated_coordinates.xls',cellstr('GFP2_y_rot'),'Sheet1','H1');
            end
            
            xlswrite('rotated_coordinates.xls', RFP2_x_rot, 'Sheet1', 'C2');
            xlswrite('rotated_coordinates.xls',cellstr('RFP2_x_rot'),'Sheet1','C1');
            xlswrite('rotated_coordinates.xls', RFP2_y_rot, 'Sheet1', 'D2');
            xlswrite('rotated_coordinates.xls',cellstr('RFP2_y_rot'),'Sheet1','D1');
            
          
            end
        end
        clearvars -except home RFP_x1_mu_mat RFP_y1_mu_mat RFP_x2_mu_mat RFP_y2_mu_mat GFP_x1_mu_mat GFP_y1_mu_mat GFP_x2_mu_mat GFP_y2_mu_mat RFP_x1_sig_mat RFP_y1_sig_mat RFP_x2_sig_mat RFP_y2_sig_mat GFP_x1_sig_mat GFP_y1_sig_mat GFP_x2_sig_mat GFP_y2_sig_mat folders folder_count items path item_count file
         
    end
end

